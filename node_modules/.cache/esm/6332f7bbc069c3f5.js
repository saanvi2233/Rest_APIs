let Joi,exist,User,CustomErrorHandler;_c06‍.x([["default",()=>_c06‍.o]]);_c06‍.w("joi",[["default",["Joi"],function(v){Joi=v}],["exist",["exist"],function(v){exist=v}]]);_c06‍.w("../../models",[["User",["User"],function(v){User=v}]]);_c06‍.w("../../sevices/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);



const registerController = {
  async register(req, res, next) {
    //validation
    const registersSchema = Joi.object({
      name: Joi.string().min(2).max(30).required(),
      email: Joi.string().email().required(),
      password: Joi.string()
        .pattern(new RegExp("^[a-zA-Z0-9]{3,30}$"))
        .required(),
      repeat_password: Joi.ref("password"),
    });

    _c06‍.g.console.log(req.body);
    const { error } = registersSchema.validate(req.body);
    if (error) {
      //     res.json({
      //         // return next(error);

      //     })
      return res.status(400).json({ error: error.details[0].message });
    }

//check if user is in the database already

try{
const exist =await User.exists({email:req.body.email});
if(exist){
    return next(CustomErrorHandler.alreadyExist('This email is already taken'));
}
}catch(err){
return next(err);
}

    res.json({ msg: "Helooo" });
  }
};

_c06‍.d(registerController);
